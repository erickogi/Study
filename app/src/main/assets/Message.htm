<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Ebrima;
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Trebuchet MS";
	panose-1:2 11 6 3 2 2 2 2 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Calibri",sans-serif;}
.erb-image-wrapper{
			max-width:100%;
            height:auto;
            position: relative;
            display:block;
            margin:0 auto;
        }
        
        .erb-image-wrapper img{
        	max-width:100% !important;
            height:auto;
            display:block;
         }


@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}




-->
</style>

</head>

<body lang=EN-US>

<div class=WordSection1>

<p class=MsoNormal><b><i><span style='font-size:12.0pt;font-family:Ebrima'>Message
passing</span></i></b></p>

<p class=MsoNormal style='line-height:15.15pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:99%'><span style='font-size:12.0pt;
line-height:99%;font-family:Ebrima;color:#222426'>A single object by itself may
not be very useful. An application contains many objects. One object interacts
with another object by invoking methods (or functions) on that object. Through
the interaction of objects, programmers achieve a higher order of functionality
which has complex behavior.</span></p>

<p class=MsoNormal style='line-height:.3pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='margin-right:48.0pt;line-height:98%'><span
style='font-size:12.0pt;line-height:98%;font-family:Ebrima;color:#222426'>One
object invoking methods on another object is known as <b>Message passing</b>.
It is also referred to as <b>Method Invocation</b>.</span></p>
<div class="erb-image-wrapper">
<img src="file:///android_asset/Message_files/image001.jpg" alt="prototype" />
</div>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:10.0pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:19.85pt'><span style='font-size:12.0pt;
font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal><b><span style='font-size:12.0pt'>Messages</span></b></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>How do you
get an object to do useful work for you? There must be a way to make a</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>request of
the object so that it will do something, such as complete a transaction, draw</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>something
on the screen or turn on a switch. And each object can satisfy only certain</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>requests.
The requests you can make of an object are defined by its interface, and the</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>type is
what determines the interface.</span></p>

<p class=MsoNormal><span style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-size:12.0pt'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-size:12.0pt'>4.1 </span><b><span
style='font-size:14.0pt'>Message structure (Anatomy of a message)</span></b></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>An object
is requested to carry out an activity via a message. Many messages also convey</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>some
information from an object to another. Effectively a message is a demand on the</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>receiving
object to apply one of its operations. Whoever is sending the message – could</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>be an
object or a free standing procedure – is called the <i>sender </i>and the <i>object
</i>receiving</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>the
message is called the <i>target</i>.</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>A message
comprises several syntactic pieces, each of which is important in its own right</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>in Object
Oriented design. In order for a sender to send a sensible message to a target,</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>the sender
must know three things:</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>--The
handle of the target; when you send a message you</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>obviously
should know whom it is going to. The sender will</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>normally
store the target’s handle in one of its variables.</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>--The name
of the operation of target that the sender wishes to</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>execute.</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>--Any
supplementary information (arguments) that the target will</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>require in
the execution of its operations. Note that message</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>arguments
can themselves be objects.</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>To send a
message to the object, you state the name of the object (a pointer to target,
or</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>variable
holding the handle of target) and connect it to the message request with a</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>member
access operator. The message request (or simply the message or <i>message</i></span></p>

<p class=MsoNormal><i><span style='font-size:12.0pt;font-family:Ebrima'>signature</span></i><span
style='font-size:12.0pt;font-family:Ebrima'>) consists of two parts: the
operation name and the list of arguements8.</span></p>

<p class=MsoNormal><b><i><span style='font-size:12.0pt;font-family:Ebrima'>The
syntax in C++ and Java is</span></i></b></p>

<p class=MsoNormal><b><i><span style='font-size:12.0pt;font-family:Ebrima'>&nbsp;</span></i></b></p>

<p class=MsoNormal><b><i><span style='font-size:12.0pt;font-family:Ebrima'>targetReference.operationName(arguments)</span></i></b></p>

<p class=MsoNormal><b><i><span style='font-size:12.0pt;font-family:Ebrima'>&nbsp;</span></i></b></p>

<p class=MsoNormal><b><i><span style='font-size:12.0pt;font-family:Ebrima'>The
syntax in PHP is</span></i></b></p>

<p class=MsoNormal><b><i><span style='font-size:12.0pt;font-family:Ebrima'>&nbsp;</span></i></b></p>

<p class=MsoNormal><b><i><span style='font-size:12.0pt;font-family:Ebrima'>targetReference-&gt;operationName(arguments)</span></i></b></p>

<p class=MsoNormal><b><i><span style='font-size:12.0pt;font-family:Ebrima'>&nbsp;</span></i></b></p>

<p class=MsoNormal><b><i><span style='font-size:12.0pt;font-family:Ebrima'>In
C++ an additional syntax is:</span></i></b></p>

<p class=MsoNormal><b><i><span style='font-size:12.0pt;font-family:Ebrima'>&nbsp;</span></i></b></p>

<p class=MsoNormal><b><i><span style='font-size:12.0pt;font-family:Ebrima'>targetPointer-&gt;operationName(arguments)</span></i></b></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>Sending a
message is like calling a traditional function procedure. To achieve the same</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>effect with
a non Object Oriented syntax we may say</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>operationName
(targetReference, arguments)</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>Notice the
inversion. With procedural technique, we appeal to a procedural unit and</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>supply it
with the object upon which to act; in object orientation, we appeal to an object,</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>which then
executes one of its procedural units.</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>Methods of
objects belonging to the same class are identical because their contents are</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>only
procedural code. </span></p>

<p class=MsoNormal><b><span style='font-size:12.0pt;font-family:Ebrima'>There
are three type of messages</span></b></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>--<b>An <i>informative
message</i></b></span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'> is a
message to an object that provides the object with information to update
itself. It is also known as an <i>update</i>, <i>forward </i>or <i>push message</i>.
It is a past-oriented messagein that it usually informs the object of what has
already  taken place elsewhere.</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>.</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>--An <b><i>interrogative
message </i>is</b> </span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>a message
to an object requesting the object to reveal some information about itself. It
is also known as an <i>read</i>, <i>backward </i>or <i>pull message</i>. It is
a presentoriented message in that it asks the for some current  information.</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>This kind
of message does not change anything; instead it is usually a query about the
piece of world that the target  object represents.</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>--An <b><i>imperative
message</i></b></span></p>

<p class=MsoNormal><i><span style='font-size:12.0pt;font-family:Ebrima'> </span></i><span
style='font-size:12.0pt;font-family:Ebrima'>is a message to an object that
requests theobject to take some action on itself, another object or even the
environment around the system. It is also known as a <i>force</i> or <i>action
message</i>. It is a future-oriented message in that it asks the object to
carry out some action in the near future.   This kind of message often results
in the target object’s</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>execution
of some significant algorithm to work out what to do.</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:Ebrima'> Many
Object Oriented systems, in which objects control pieces of hardware often
contain many imperative massages. These systems clearly illustrate the
future-oriented spirit of an imperative message. An example is a message to the 
to pri</span><span style='font-family:Ebrima'>nt a document.</span></p>

</div>

</body>

</html>
